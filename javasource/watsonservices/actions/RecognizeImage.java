// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package watsonservices.actions;

import java.io.File;
import java.io.InputStream;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import com.ibm.watson.developer_cloud.visual_recognition.v3.VisualRecognition;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifyImagesOptions;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.ImageClassification;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.VisualClassification;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.VisualClassifier;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.VisualClassifier.VisualClass;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

/**
 * If Classifier is an empty string all existing classifiers will be used
 */
public class RecognizeImage extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __VisualRequestObject;
	private watsonservices.proxies.VisualRecognitionImage VisualRequestObject;
	private String apikey;
	private String classifier;

	public RecognizeImage(IContext context, IMendixObject VisualRequestObject, String apikey, String classifier)
	{
		super(context);
		this.__VisualRequestObject = VisualRequestObject;
		this.apikey = apikey;
		this.classifier = classifier;
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.VisualRequestObject = __VisualRequestObject == null ? null : watsonservices.proxies.VisualRecognitionImage.initialize(getContext(), __VisualRequestObject);

		// BEGIN USER CODE
		VisualRecognition service = new VisualRecognition(VisualRecognition.VERSION_DATE_2016_05_19);
		service.setApiKey(this.apikey);
		
		system.proxies.FileDocument fileDocument = VisualRequestObject;
		File tempFile = new File(Core.getConfiguration().getTempPath() + fileDocument.getName());
		InputStream stream = Core.getFileDocumentContent(getContext(), __VisualRequestObject);
		Files.copy(stream, tempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
		stream.close();
		
		ClassifyImagesOptions options = null;
		List<VisualClassifier> classifiers = null;
		
		if(!classifier.isEmpty()) {
			List<String> classifierIds = new ArrayList<String>();
			classifierIds.add(classifier);
			
			options = new ClassifyImagesOptions.Builder()
					.classifierIds(classifierIds)
					.images(tempFile)
					.build();
			
			VisualClassification result = service.classify(options).execute();
			
			List<ImageClassification> images = result.getImages();
			ImageClassification firstImage = images.get(0);
			classifiers = firstImage.getClassifiers();
		}
		else {
			options = new ClassifyImagesOptions.Builder()
					.images(tempFile)
					.build();
			
			VisualClassification result = service.classify(options).execute();
			List<ImageClassification> images = result.getImages();
			ImageClassification firstImage = images.get(0);
			classifiers = firstImage.getClassifiers();
		}
		
		java.util.List<IMendixObject> mxresults = new java.util.ArrayList<IMendixObject>();
		for(VisualClassifier classifier : classifiers){
			IMendixObject scoreObject = Core.instantiate(getContext(), "WatsonServices.Score");
			
			for(VisualClass visualClass : classifier.getClasses()){
				scoreObject.setValue(getContext(), "Name", visualClass.getName());
				scoreObject.setValue(getContext(), "Score", new BigDecimal(visualClass.getScore()));
			}
			
			mxresults.add(scoreObject);
		}
	
		return mxresults;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "RecognizeImage";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
