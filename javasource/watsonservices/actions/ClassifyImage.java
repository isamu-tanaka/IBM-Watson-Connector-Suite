// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package watsonservices.actions;

import java.io.File;
import java.io.InputStream;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import com.ibm.watson.developer_cloud.visual_recognition.v3.VisualRecognition;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.ClassifyImagesOptions;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.ImageClassification;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.VisualClassification;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.VisualClassifier;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.VisualClassifier.VisualClass;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.MendixException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import watsonservices.proxies.Classifier;
import watsonservices.proxies.ClassifierClass;

/**
 * If Classifier is an empty string all existing classifiers will be used
 */
public class ClassifyImage extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __VisualRequestObject;
	private watsonservices.proxies.VisualRecognitionImage VisualRequestObject;
	private String apikey;
	private java.util.List<IMendixObject> __classifiers;
	private java.util.List<watsonservices.proxies.Classifier> classifiers;

	public ClassifyImage(IContext context, IMendixObject VisualRequestObject, String apikey, java.util.List<IMendixObject> classifiers)
	{
		super(context);
		this.__VisualRequestObject = VisualRequestObject;
		this.apikey = apikey;
		this.__classifiers = classifiers;
	}

	@Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.VisualRequestObject = __VisualRequestObject == null ? null : watsonservices.proxies.VisualRecognitionImage.initialize(getContext(), __VisualRequestObject);

		this.classifiers = new java.util.ArrayList<watsonservices.proxies.Classifier>();
		if (__classifiers != null)
			for (IMendixObject __classifiersElement : __classifiers)
				this.classifiers.add(watsonservices.proxies.Classifier.initialize(getContext(), __classifiersElement));

		// BEGIN USER CODE
		LOGGER.debug("Executing RecognizeImage Connector...");
		
		final VisualRecognition service = new VisualRecognition(VisualRecognition.VERSION_DATE_2016_05_19);
		service.setApiKey(this.apikey);
		
		final File imageToRecognizeFile = new File(Core.getConfiguration().getTempPath() + VisualRequestObject.getName());	
		try(InputStream stream = Core.getFileDocumentContent(getContext(), this.VisualRequestObject.getMendixObject())){
			
			Files.copy(stream, imageToRecognizeFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
		}catch(Exception e){
			LOGGER.error("There was a problem with the image file: " + imageToRecognizeFile.getPath(), e);
			throw new MendixException(e);
		}
		
		ClassifyImagesOptions options = buildClassifyImagesOptions(this.classifiers, imageToRecognizeFile);
		VisualClassification response = null;
		try{
			
			response = service.classify(options).execute();
		}catch(Exception e){
			LOGGER.error("Watson Service connection - Failed classifying the image: " + imageToRecognizeFile.getName(), e);
			throw new MendixException(e);
		}finally{
			imageToRecognizeFile.delete();
		}
			
		final List<IMendixObject> responseResults = new ArrayList<IMendixObject>();
		for(ImageClassification image : response.getImages()){
						
			for(VisualClassifier classifier : image.getClassifiers()){
								
				IMendixObject classifierObject;
				try {
					classifierObject = getClassifierEntity(classifier.getName());
				} catch (MendixException e) {
					LOGGER.error(e);
					
					if("default".equals(classifier.getName())){
						LOGGER.warn("You may have forgotten to create the default classifier on the app startup microflow");
					}
					
					throw new MendixException(e);
				}
				
				for(VisualClass visualClass : classifier.getClasses()){
					IMendixObject classifierClassObject = Core.instantiate(getContext(), ClassifierClass.entityName);
					
					classifierClassObject.setValue(getContext(), ClassifierClass.MemberNames.Name.toString(), visualClass.getName());
					classifierClassObject.setValue(getContext(), ClassifierClass.MemberNames.Score.toString(), new BigDecimal(visualClass.getScore()));
					classifierClassObject.setValue(getContext(), ClassifierClass.MemberNames.ClassifierClass_Classifier.toString(), classifierObject.getId());
					classifierClassObject.setValue(getContext(), ClassifierClass.MemberNames.ClassifierClass_VisualRecognitionImage.toString(), VisualRequestObject.getMendixObject().getId());
					
					Core.commit(getContext(), classifierClassObject);
				}
				
				responseResults.add(classifierObject);
			}
		}
		
		return responseResults;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "ClassifyImage";
	}

	// BEGIN EXTRA CODE
	private static final String WATSON_VISUAL_RECOGNITION_LOGNODE = "WatsonServices.IBM_WatsonConnector_VisualRecognition";
	private static final ILogNode LOGGER = Core.getLogger(Core.getConfiguration().getConstantValue(WATSON_VISUAL_RECOGNITION_LOGNODE).toString());
	private static final String CLASSIFIER_ENTITY_NAME = Classifier.entityName;
	private static final String CLASSIFIER_ENTITY_PROPERTY = Classifier.MemberNames.Name.name();
	
	private static ClassifyImagesOptions buildClassifyImagesOptions(List<Classifier> classifiers, File imageToRecognizeFile){
		ClassifyImagesOptions options = null;
		
		if(!classifiers.isEmpty()) {
			List<String> classifierIds = new ArrayList<String>();
			
			for(Classifier classifier : classifiers){
				classifierIds.add(classifier.getName());
			}
			
			options = new ClassifyImagesOptions.Builder()
					.classifierIds(classifierIds)
					.images(imageToRecognizeFile)
					.build();
		}
		else {
			options = new ClassifyImagesOptions.Builder()
					.images(imageToRecognizeFile)
					.build();	
		}
		
		return options;
	}
	
	private IMendixObject getClassifierEntity(String classifierName) throws MendixException{
	
		final List<IMendixObject> classifierObjectList = Core.retrieveXPathQueryEscaped(getContext(), "//%s[%s ='%s']", CLASSIFIER_ENTITY_NAME, CLASSIFIER_ENTITY_PROPERTY, classifierName);		
		
		if(classifierObjectList.isEmpty()){
			throw new MendixException("Not found a classifier object with id: " + classifierName);
		}
		
		return classifierObjectList.get(0);
	}
	// END EXTRA CODE
}
