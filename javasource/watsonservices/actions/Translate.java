// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package watsonservices.actions;

import org.apache.commons.lang3.StringUtils;
import com.ibm.watson.developer_cloud.language_translation.v2.LanguageTranslation;
import com.ibm.watson.developer_cloud.language_translation.v2.model.Language;
import com.ibm.watson.developer_cloud.language_translation.v2.model.TranslationResult;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.MendixException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

/**
 * FromLang could be empty. Language will be detected if possible. If not possible an exception will be thrown
 * 
 */
public class Translate extends CustomJavaAction<IMendixObject>
{
	private IMendixObject __translation;
	private watsonservices.proxies.Translation translation;
	private String username;
	private String password;

	public Translate(IContext context, IMendixObject translation, String username, String password)
	{
		super(context);
		this.__translation = translation;
		this.username = username;
		this.password = password;
	}

	@Override
	public IMendixObject executeAction() throws Exception
	{
		this.translation = __translation == null ? null : watsonservices.proxies.Translation.initialize(getContext(), __translation);

		// BEGIN USER CODE
		LOGGER.debug("Executing Translate Connector...");
		
		final LanguageTranslation service = new LanguageTranslation();
	    service.setUsernameAndPassword(username, password);
	   
	    final Language source = getLanguage(translation.getTranslation_SourceLanguage().getCode());
	    final Language target = getLanguage(translation.getTranslation_TargetLanguage().getCode());
	    
	    TranslationResult result;
		try {
			
			result = service.translate(translation.getText(), source, target).execute();
		} catch (Exception e) {
			LOGGER.error("Watson Service connection - Failed translating from" + source + " to " + target + " the text " + StringUtils.abbreviate(translation.getText(), 20), e);
			throw new MendixException(e);
		}
	    
	    translation.setWordCount(Long.valueOf(result.getWordCount()));
	    translation.setCharacterCount(Long.valueOf(result.getCharacterCount()));
	    translation.setOutput(result.getFirstTranslation());
		Core.commit(getContext(), translation.getMendixObject());
		
		return translation.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "Translate";
	}

	// BEGIN EXTRA CODE
	private static final String WATSON_TRANSLATE_LOGNODE = "WatsonServices.IBM_WatsonConnector_Translate";
	private static ILogNode LOGGER = Core.getLogger(Core.getConfiguration().getConstantValue(WATSON_TRANSLATE_LOGNODE).toString());

	private static Language getLanguage(String lang) throws MendixException {
		if(Language.ARABIC.toString().equals(lang)){
			return Language.ARABIC;
		}
		if(Language.ENGLISH.toString().equals(lang)){
			return Language.ENGLISH;
		}
		if(Language.SPANISH.toString().equals(lang)){
			return Language.SPANISH;
		}
		if(Language.FRENCH.toString().equals(lang)){
			return Language.FRENCH;
		}
		if(Language.ITALIAN.toString().equals(lang)){
			return Language.ITALIAN;
		}
		if(Language.PORTUGUESE.toString().equals(lang)){
			return Language.PORTUGUESE;
		}
		
		throw new MendixException("The language is not supported: " + lang);
	}
	// END EXTRA CODE
}
