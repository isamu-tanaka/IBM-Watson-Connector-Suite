// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package watsonservices.actions;

import java.io.File;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import com.ibm.watson.developer_cloud.visual_recognition.v3.VisualRecognition;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.CreateClassifierOptions;
import com.ibm.watson.developer_cloud.visual_recognition.v3.model.VisualClassifier;
import com.mendix.core.Core;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.MendixException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import system.proxies.FileDocument;
import watsonservices.proxies.TrainingImagesZipFile;

public class CreateClassifier extends CustomJavaAction<String>
{
	private String apikey;
	private IMendixObject __classifier;
	private watsonservices.proxies.Classifier classifier;

	public CreateClassifier(IContext context, String apikey, IMendixObject classifier)
	{
		super(context);
		this.apikey = apikey;
		this.__classifier = classifier;
	}

	@Override
	public String executeAction() throws Exception
	{
		this.classifier = __classifier == null ? null : watsonservices.proxies.Classifier.initialize(getContext(), __classifier);

		// BEGIN USER CODE
		LOGGER.debug("Executing CreateClassifier Connector...");
		
		final VisualRecognition service = new VisualRecognition(VisualRecognition.VERSION_DATE_2016_05_19);
		service.setApiKey(this.apikey);
		
		final TrainingImagesZipFile posTrainingImagesZipFile = classifier.getClassifier_positiveTrainingImagesZipFile();
		final FileDocument posZipFileDocument = posTrainingImagesZipFile;
		final File posTempFile = new File(Core.getConfiguration().getTempPath() + posZipFileDocument.getName());
		
		final TrainingImagesZipFile negTrainingImagesZipFile = classifier.getClassifier_negativeTrainingImagesZipFile();
		final FileDocument negZipFileDocument = negTrainingImagesZipFile;
		final File negTempFile = new File(Core.getConfiguration().getTempPath() + negZipFileDocument.getName());
		
		try(InputStream postFileStream = Core.getFileDocumentContent(getContext(), posTrainingImagesZipFile.getMendixObject()); 
			InputStream	negFileStream = Core.getFileDocumentContent(getContext(), negTrainingImagesZipFile.getMendixObject())){

			Files.copy(postFileStream, posTempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
			Files.copy(negFileStream, negTempFile.toPath(), StandardCopyOption.REPLACE_EXISTING);

		}catch(Exception e){
			LOGGER.error("There was a problem with the ZIP files: " + posTempFile.getPath() + " and " + negTempFile.getPath(), e);
		}		
		
	    final CreateClassifierOptions options = new CreateClassifierOptions.Builder().
	    		classifierName(classifier.getName())
	    		.addClass(posTrainingImagesZipFile.getName(), posTempFile)
	    		.negativeExamples(negTempFile)
	    		.build();
	    
		VisualClassifier visualClassifier;
		try {
			visualClassifier = service.createClassifier(options).execute();
		} catch (Exception e) {
			LOGGER.error("Watson Service connection - Failed creating the classifier:"  +  classifier.getName(), e);
			throw new MendixException(e);
		}
	    
		return visualClassifier.getId();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "CreateClassifier";
	}

	// BEGIN EXTRA CODE
	private static final String WATSON_VISUAL_RECOGNITION_LOGNODE = "IBM_WatsonConnector_VisualRecognition";
	private static final ILogNode LOGGER = Core.getLogger(Core.getConfiguration().getConstantValue(WATSON_VISUAL_RECOGNITION_LOGNODE).toString());
	// END EXTRA CODE
}
